services:
  otel-collector:
    container_name: otel-collector
    image: otel/opentelemetry-collector-contrib
    command:
      - --config=/etc/otelcol-contrib/config.yaml
    volumes:
      - ./docker/collector/otel-collector.yaml:/etc/otelcol-contrib/config.yaml
    ports:
      - "1888:1888" # pprof extension
      - "8888:8888" # Prometheus metrics exposed by the Collector
      - "8889:8889" # Prometheus exporter metrics
      - "13133:13133" # health_check extension
      - "4317:4317" # OTLP gRPC receiver
      - "4318:4318" # OTLP http receiver
      - "55679:55679" # zpages extension
    depends_on:
      - prometheus
      - tempo
      - loki

  prometheus:
    container_name: prometheus
    image: prom/prometheus
    command:
      - --config.file=/etc/prometheus/prometheus.yaml
      - --storage.tsdb.retention.time=1h
    volumes:
      - ./docker/prometheus/prometheus.yaml:/etc/prometheus/prometheus.yaml
      - prometheusData:/prometheus
    ports:
      - "9090:9090"

  grafana:
    container_name: grafana
    image: grafana/grafana
    ports:
      - "3000:3000"

  # Tempo runs as user 10001, and docker compose creates the volume as root.
  # As such, we need to chown the volume in order for Tempo to start correctly.
  init:
    container_name: tempo-init
    image: &tempoImage grafana/tempo:latest
    user: root
    entrypoint:
      - "chown"
      - "10001:10001"
      - "/var/tempo"
    volumes:
      - ./tempo-data:/var/tempo

  tempo:
    container_name: tempo
    image: grafana/tempo:latest
    command: 
      - -config.file=/etc/tempo.yaml
    volumes:
      - ./docker/tempo/tempo.yaml:/etc/tempo.yaml
      - tempoData:/var/tempo
    ports:
      - "3200:3200"
      - "4317"
    depends_on:
      - init
      - prometheus
      - loki

  loki:
    container_name: loki
    image: grafana/loki:latest
    command:
      - -config.file=/etc/loki/local-config.yaml
    ports:
      - "3100:3100"

volumes:
    prometheusData:
      driver: local
    tempoData:
      driver: local